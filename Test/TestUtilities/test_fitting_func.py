# -*- coding: utf-8 -*-

#-----------------------------------------------------------------------------#
# Goal is to try different parametrizations and see which ones are better at 
# fitting some target functions (found by pcw optim) or generated by path 
# sampling
#-----------------------------------------------------------------------------#



### lOAD functions
import sys
sys.path.append("../../../")
import numpy as np
from QuantumSimulation.Utility.Optim import pFunc_base #, pFunc_zoo
from QuantumSimulation.Utility.Optim.Batch import BatchParametrizedControler as btch

target2 = pFunc_base.pFunc_base.read_func_from_file('func_pcw40.txt')
T2 = 10

target1 = pFunc_base.pFunc_base.read_func_from_file('optim_bo_owbds01_pwc15.txt')
T1 = np.pi/np.sqrt(2) +0.1

target3 = pFunc_base.pFunc_base.read_func_from_file('optim_bo_owbds01_pwc15_bdaries.txt')
T3 = np.pi/np.sqrt(2) +0.1

#----------------------------------------#
# Target 3
#----------------------------------------#
target = target3[0]
T = T3
dico_de = {'disp':True}

x = np.linspace(-0.01, T +0.01, 1000)
xx = np.linspace(-0.1, T +0.1, 1000)
target.plot_function(xx)

def get_best_n_times(name_func, n_param, n_repeat):
    dico_ctl = {'ctl_shortcut':name_func + str(nb_par)}
    best_fit = np.inf
    best_f = None

    for r in range(n_repeat):
        fun_expr = btch._process_controler(dico_ctl)
        ansatz1 = btch._build_control_from_string(fun_expr['control_obj'], context_dico = {'T':T})
        f_tmp, fit_tmp = ansatz1.fit_to_target_func(target, x, return_fit=True)
        if(fit_tmp<best_fit):
            best_fit = fit_tmp 
            best_f = f_tmp
        return best_f, best_fit

#CRAB NEW
nb_par = 4
nb_repeat = 1
name_ansatz = 'owbds01_4crab'
f_crab3, fit_crab3 = get_best_n_times(name_ansatz, nb_par, nb_repeat)
f_crab3.plot_function(x)
target.plot_function(x)

#CRAB
nb_par = 4
nb_repeat = 30
name_ansatz = 'owbds01_crab'
f_crab, fit_crab = get_best_n_times(name_ansatz, nb_par, nb_repeat)
f_crab.plot_function(x)
target.plot_function(x)


#CRAB1
nb_par = 4
nb_repeat = 30
name_ansatz = 'owbds01_1crab'
f_crab1, fit_crab1 = get_best_n_times(name_ansatz, nb_par, nb_repeat)
f_crab1.plot_function(x)
target.plot_function(x)



#CRAB
nb_par = 4
nb_repeat = 30
name_ansatz = 'owbds01_2crab'
f_crab2, fit_crab2 = get_best_n_times(name_ansatz, nb_par, nb_repeat)
f_crab2.plot_function(x)
target.plot_function(x)


#CRAB // best one
nb_par = 4
nb_repeat = 30
name_ansatz = 'owbds01_3crab'

f_crab3, fit_crab3 = get_best_n_times(name_ansatz, nb_par, nb_repeat)
f_crab3.plot_function(x)
target.plot_function(x)

#CRAB 0.009
nb_par = 4
nb_repeat = 30
name_ansatz = 'owbds01_4crab'
f_crab3, fit_crab3 = get_best_n_times(name_ansatz, nb_par, nb_repeat)
f_crab3.plot_function(x)
target.plot_function(x)


#TrSin 0.0078
nb_par = 6
nb_repeat = 1
name_ansatz = 'owbds01_trsin'
f_crab3, fit_crab3 = get_best_n_times(name_ansatz, nb_par, nb_repeat)
f_crab3.plot_function(x)
target.plot_function(x)




# WithRBF
nb_par = 10
nb_repeat = 1
name_ansatz = 'owbds01_1grbf'
f_crab3, fit_crab3 = get_best_n_times(name_ansatz, nb_par, nb_repeat)
f_crab3.plot_function(x)
target.plot_function(x)





#crablike_four
dico_ctl = {'ctl_shortcut':'owbds01_crfour10'}
fun_expr = btch._process_controler(dico_ctl)
ansatz2 = btch._build_control_from_string(fun_expr['control_obj'], context_dico = {'T':T})
f = ansatz2.fit_to_target_func(target, x, **dico_de)
ansatz2.plot_function(x)
target.plot_function(x)

# new F-custom
dico_ctl = {'ctl_shortcut':'owbds01_cfred10'}
fun_expr = btch._process_controler(dico_ctl)
ansatz3 = btch._build_control_from_string(fun_expr['control_obj'], context_dico = {'T':T})
f = ansatz3.fit_to_target_func(target, x, **dico_de)
ansatz3.plot_function(x)
target.plot_function(x)

